name: CI
run-name: ${{ github.actor }}

on: push

jobs:
  build:
    if: github.actor == 'azimafroozeh'
    strategy:
      fail-fast: false
      matrix:
        platform: [ T4, V100 ]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4

      - name: Make directory build
        run: mkdir ${{github.workspace}}/build

      - name: nvidia-smi
        run: nvidia-smi

      - name: nvcc version
        run: nvcc --version

      - name: gcc --version
        run: gcc --version

      - name: make clean
        run: make clean

      - name: mkdir -p bin/bench
        run: mkdir -p bin/bench

      - name: make bench/gen bench/gen_d1 bench/gen_d2
        run: make bench/gen bench/gen_d1 bench/gen_d2

      - name: For test distributions
        run: |
          make bench/binpack
          make bench/deltabinpack

#      - name: generate all bit-width
#        continue-on-error: true
#        run: |
#          for i in {0..32}
#          do
#            ./bin/bench/gen $i
#            ./bin/bench/gen_d1 $i
#            ./bin/bench/gen_d2 $i
#          done

#      - name: binpack and deltabinpack all bit-width
#        continue-on-error: true
#        run: |
#          for i in {0..32}
#          do
#            ./bin/bench/binpack $i
#            ./bin/bench/deltabinpack $i
#          done


      - name: make directory build
        run: mkdir -p ${{github.workspace}}/build

      - name: make bench/binpack
        run: make bench/binpack

      - name: make bench/deltabinpack
        run: make bench/deltabinpack

      - name: For SSB columns
        run: |
          mkdir -p bin/ssb
          make ssb/binpack
          make ssb/deltabinpack
          make ssb/rlebinpack

      - name: encode columns
        run: ./compress.sh

      #      - name: ./bin/bench/binpack <num_bits>
      #        run: ./bin/bench/binpack 3
      #
      #      - name: ./bin/bench/binpack <num_bits>
      #        run: ./bin/bench/deltabinpack 3

      # generate dataset
      #      - name: cd test/
      #        run: |
      #          cd test/
      #          cd ssb/dbgen
      #          make
      #          cd ../loader
      #          make
      #          cd ../../
      #          python3 util.py ssb 10 gen
      #          sudo python3 util.py ssb 10 transform
      #          cd src/ssb/


      - name: mkdir -p obj/ssb
        run: mkdir -p obj/ssb

      - name: mkdir -p bin/ssb
        run: mkdir -p bin/ssb

      - name: make RLE
        run: |
          make bin/ssb/test_perf_rle
          make bin/ssb/test_match_rle

      - name: ./bin/ssb/test_perf_rle <col_name>
        continue-on-error: true
        run: ./bin/ssb/test_perf_rle lo_orderkey

      - name: ./bin/ssb/test_match_rle <col_name>
        continue-on-error: true
        run: ./bin/ssb/test_match_rle lo_orderkey

      - name: make queries
        run: |
          make bin/ssb/q11r
          make bin/ssb/q21r
          make bin/ssb/q31r
          make bin/ssb/q41r

      - name: ls /home/ubuntu/gpu-compression/test/ssb/data/s10_columnar/
        run: ls /home/ubuntu/gpu-compression/test/ssb/data/s10_columnar/

      - name: run all queries
        run: |
          ./bin/ssb/q11r
          ./bin/ssb/q21r
          ./bin/ssb/q31r
          ./bin/ssb/q41r

      - name: NCU all queries
        run: |
          echo "q11 : "
          ncu ./bin/ssb/q11r 
          echo "q21 : "
          ncu ./bin/ssb/q21r
          echo "q31 : "
          ncu ./bin/ssb/q31r 
          echo "q41 : "
          ncu ./bin/ssb/q41r 






